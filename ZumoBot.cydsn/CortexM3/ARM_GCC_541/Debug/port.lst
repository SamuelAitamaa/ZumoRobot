ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskExitError,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskExitError, %function
  24              	prvTaskExitError:
  25              	.LFB69:
  26              		.file 1 "..\\FreeRTOS\\Source\\portable\\GCC\\ARM_CM3\\port.c"
   1:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*
   2:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * FreeRTOS Kernel V10.0.1
   3:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  *
   5:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * subject to the following conditions:
  11:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  *
  12:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * copies or substantial portions of the Software.
  14:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  *
  15:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  *
  22:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * http://www.FreeRTOS.org
  23:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * http://aws.amazon.com/freertos
  24:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  *
  25:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * 1 tab == 4 spaces!
  26:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  */
  27:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
  28:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------
  29:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  30:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  *----------------------------------------------------------*/
  31:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 2


  32:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /* Scheduler includes. */
  33:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #include "FreeRTOS.h"
  34:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #include "task.h"
  35:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
  36:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  37:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  38:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  39:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  40:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  41:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #endif
  42:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
  43:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  44:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  45:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  46:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  47:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #else
  48:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  49:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	as the core. */
  50:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  51:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #endif
  52:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
  53:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to manipulate the core.  Registers first... */
  54:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  55:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  56:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  57:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  58:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /* ...then bits in the registers. */
  59:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  60:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  61:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  62:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  63:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  64:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
  65:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  66:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  67:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
  68:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to check the validity of an interrupt priority. */
  69:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
  70:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
  71:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
  72:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
  73:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
  74:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
  75:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
  76:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
  77:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
  78:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  79:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
  80:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
  81:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
  82:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
  83:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
  84:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /* The systick is a 24-bit counter. */
  85:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
  86:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
  87:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
  88:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** occurred while the SysTick counter is stopped during tickless idle
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 3


  89:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** calculations. */
  90:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
  91:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
  92:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  93:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  94:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #define portSTART_ADDRESS_MASK				( ( StackType_t ) 0xfffffffeUL )
  95:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
  96:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
  97:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
  98:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** debugger. */
  99:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #ifdef configTASK_RETURN_ADDRESS
 100:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 101:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #else
 102:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 103:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #endif
 104:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 105:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*
 106:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 107:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * file is weak to allow application writers to change the timer used to
 108:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * generate the tick interrupt.
 109:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  */
 110:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** void vPortSetupTimerInterrupt( void );
 111:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 112:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*
 113:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * Exception handlers.
 114:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  */
 115:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 116:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void );
 117:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 118:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 119:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*
 120:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 121:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  */
 122:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 123:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 124:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*
 125:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 126:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  */
 127:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void );
 128:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 129:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 130:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 131:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 132:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** variable. */
 133:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 134:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 135:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*
 136:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * The number of SysTick increments that make up one tick period.
 137:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  */
 138:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 139:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 140:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 141:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 142:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*
 143:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 144:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * 24 bit resolution of the SysTick timer.
 145:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  */
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 4


 146:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 147:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 148:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 149:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 150:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*
 151:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 152:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * power functionality only.
 153:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  */
 154:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 155:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 156:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 157:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 158:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*
 159:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 160:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 161:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 162:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  */
 163:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #if( configASSERT_DEFINED == 1 )
 164:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 165:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 166:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 167:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configASSERT_DEFINED */
 168:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 169:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 170:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 171:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*
 172:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 173:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  */
 174:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 175:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** {
 176:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 177:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	interrupt. */
 178:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
 179:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 180:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
 181:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 182:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
 183:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 184:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 185:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 186:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 187:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 188:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	return pxTopOfStack;
 189:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** }
 190:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 191:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 192:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void )
 193:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** {
  27              		.loc 1 193 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              		.cfi_def_cfa_offset 8
 194:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** volatile uint32_t ulDummy = 0UL;
  34              		.loc 1 194 0
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 5


  35 0002 0023     		movs	r3, #0
  36 0004 0193     		str	r3, [sp, #4]
  37              	.LBB12:
  38              	.LBB13:
  39              		.file 2 "..\\FreeRTOS\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 6


  53:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  55:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  66:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  90:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 7


 110:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 134:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 147:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 8


 167:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 171:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 174:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 177:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 179:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 181:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 182:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 183:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 185:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 186:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 187:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 188:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 189:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 193:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
  40              		.loc 2 195 0
  41              		.syntax unified
  42              	@ 195 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
  43 0006 4FF0A003 			mov r3, #160												
  44 000a 83F31188 		msr basepri, r3											
  45 000e BFF36F8F 		isb														
  46 0012 BFF34F8F 		dsb														
  47              	
  48              	@ 0 "" 2
  49              	.LVL0:
  50              		.thumb
  51              		.syntax unified
  52              	.L2:
  53              	.LBE13:
  54              	.LBE12:
 195:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 196:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 197:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 198:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	should instead call vTaskDelete( NULL ).
 199:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 200:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 201:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	defined, then stop here so application writers can catch the error. */
 202:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 203:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 204:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	while( ulDummy == 0 )
  55              		.loc 1 204 0 discriminator 1
  56 0016 019B     		ldr	r3, [sp, #4]
  57 0018 002B     		cmp	r3, #0
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 9


  58 001a FCD0     		beq	.L2
 205:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	{
 206:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* This file calls prvTaskExitError() after the scheduler has been
 207:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		started to remove a compiler warning about the function being defined
 208:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		but never called.  ulDummy is used purely to quieten other warnings
 209:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		about code appearing after this function is called - making ulDummy
 210:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		volatile makes the compiler think the function could return and
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		therefore not output an 'unreachable code' warning for code that appears
 212:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		after it. */
 213:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	}
 214:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** }
  59              		.loc 1 214 0
  60 001c 02B0     		add	sp, sp, #8
  61              		.cfi_def_cfa_offset 0
  62              		@ sp needed
  63 001e 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE69:
  66              		.size	prvTaskExitError, .-prvTaskExitError
  67              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  68              		.align	2
  69              		.thumb
  70              		.thumb_func
  71              		.type	prvPortStartFirstTask, %function
  72              	prvPortStartFirstTask:
  73              	.LFB71:
 215:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 216:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 217:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void )
 218:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** {
 219:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile (
 220:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 221:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 222:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 223:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 224:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 225:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"	isb								\n"
 226:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 227:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 228:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 229:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"	bx r14							\n"
 230:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"									\n"
 231:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"	.align 4						\n"
 232:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 233:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				);
 234:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** }
 235:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 236:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 237:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void )
 238:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** {
  74              		.loc 1 238 0
  75              		.cfi_startproc
  76              		@ Naked Function: prologue and epilogue provided by programmer.
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
 239:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile(
  79              		.loc 1 239 0
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 10


  80              		.syntax unified
  81              	@ 239 "..\FreeRTOS\Source\portable\GCC\ARM_CM3\port.c" 1
  82 0000 0648     		 ldr r0, =0xE000ED08 	
  83 0002 0068     	 ldr r0, [r0] 			
  84 0004 0068     	 ldr r0, [r0] 			
  85 0006 80F30888 	 msr msp, r0			
  86 000a 62B6     	 cpsie i				
  87 000c 61B6     	 cpsie f				
  88 000e BFF34F8F 	 dsb					
  89 0012 BFF36F8F 	 isb					
  90 0016 00DF     	 svc 0					
  91 0018 00BF     	 nop					
  92              	
  93              	@ 0 "" 2
 240:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 241:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 242:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 243:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 244:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 245:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					" cpsie f				\n"
 246:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					" dsb					\n"
 247:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					" isb					\n"
 248:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 249:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					" nop					\n"
 250:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				);
 251:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** }
  94              		.loc 1 251 0
  95              		.thumb
  96              		.syntax unified
  97              		.cfi_endproc
  98              	.LFE71:
  99              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
 100 001a 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
 101              		.align	2
 102              		.global	pxPortInitialiseStack
 103              		.thumb
 104              		.thumb_func
 105              		.type	pxPortInitialiseStack, %function
 106              	pxPortInitialiseStack:
 107              	.LFB68:
 175:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 108              		.loc 1 175 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113              	.LVL1:
 179:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
 114              		.loc 1 179 0
 115 0000 4FF08073 		mov	r3, #16777216
 116 0004 40F8043C 		str	r3, [r0, #-4]
 117              	.LVL2:
 181:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
 118              		.loc 1 181 0
 119 0008 21F00101 		bic	r1, r1, #1
 120              	.LVL3:
 121 000c 40F8081C 		str	r1, [r0, #-8]
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 11


 122              	.LVL4:
 183:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 123              		.loc 1 183 0
 124 0010 034B     		ldr	r3, .L6
 125 0012 40F80C3C 		str	r3, [r0, #-12]
 126              	.LVL5:
 185:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 127              		.loc 1 185 0
 128 0016 40F8202C 		str	r2, [r0, #-32]
 129              	.LVL6:
 189:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 130              		.loc 1 189 0
 131 001a 4038     		subs	r0, r0, #64
 132              	.LVL7:
 133 001c 7047     		bx	lr
 134              	.L7:
 135 001e 00BF     		.align	2
 136              	.L6:
 137 0020 00000000 		.word	prvTaskExitError
 138              		.cfi_endproc
 139              	.LFE68:
 140              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
 141              		.section	.text.vPortSVCHandler,"ax",%progbits
 142              		.align	2
 143              		.global	vPortSVCHandler
 144              		.thumb
 145              		.thumb_func
 146              		.type	vPortSVCHandler, %function
 147              	vPortSVCHandler:
 148              	.LFB70:
 218:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile (
 149              		.loc 1 218 0
 150              		.cfi_startproc
 151              		@ Naked Function: prologue and epilogue provided by programmer.
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 219:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 154              		.loc 1 219 0
 155              		.syntax unified
 156              	@ 219 "..\FreeRTOS\Source\portable\GCC\ARM_CM3\port.c" 1
 157 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 158 0002 1968     		ldr r1, [r3]					
 159 0004 0868     		ldr r0, [r1]					
 160 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 161 000a 80F30988 		msr psp, r0						
 162 000e BFF36F8F 		isb								
 163 0012 4FF00000 		mov r0, #0 						
 164 0016 80F31188 		msr	basepri, r0					
 165 001a 4EF00D0E 		orr r14, #0xd					
 166 001e 7047     		bx r14							
 167              										
 168              		.align 4						
 169 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 170              	
 171              	@ 0 "" 2
 234:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 172              		.loc 1 234 0
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 12


 173              		.thumb
 174              		.syntax unified
 175              		.cfi_endproc
 176              	.LFE70:
 177              		.size	vPortSVCHandler, .-vPortSVCHandler
 178              		.section	.text.vPortEndScheduler,"ax",%progbits
 179              		.align	2
 180              		.global	vPortEndScheduler
 181              		.thumb
 182              		.thumb_func
 183              		.type	vPortEndScheduler, %function
 184              	vPortEndScheduler:
 185              	.LFB73:
 252:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 253:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 254:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*
 255:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 256:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  */
 257:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** BaseType_t xPortStartScheduler( void )
 258:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** {
 259:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 260:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 261:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 262:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 263:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	#if( configASSERT_DEFINED == 1 )
 264:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	{
 265:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint32_t ulOriginalPriority;
 266:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 267:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 268:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 269:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 270:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		functions can be called.  ISR safe functions are those that end in
 271:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 272:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 273:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 274:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 275:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 276:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 277:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* Determine the number of priority bits available.  First write to all
 278:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		possible bits. */
 279:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 280:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 281:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* Read the value back to see how many bits stuck. */
 282:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 283:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 284:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* Use the same mask on the maximum system call priority. */
 285:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 286:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 287:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 288:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		of bits read back. */
 289:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 290:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 291:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		{
 292:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			ulMaxPRIGROUPValue--;
 293:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 294:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		}
 295:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 13


 296:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		#ifdef __NVIC_PRIO_BITS
 297:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		{
 298:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Check the CMSIS configuration that defines the number of
 299:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			priority bits matches the number of priority bits actually queried
 300:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			from the hardware. */
 301:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 302:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		}
 303:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		#endif
 304:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 305:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		#ifdef configPRIO_BITS
 306:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		{
 307:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Check the FreeRTOS configuration that defines the number of
 308:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			priority bits matches the number of priority bits actually queried
 309:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			from the hardware. */
 310:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 311:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		}
 312:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		#endif
 313:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 314:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 315:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		register. */
 316:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 317:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 318:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 319:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 320:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		value. */
 321:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 322:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	}
 323:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	#endif /* conifgASSERT_DEFINED */
 324:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 325:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 326:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 327:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 328:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 329:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 330:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	here already. */
 331:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	vPortSetupTimerInterrupt();
 332:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 333:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 334:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 335:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 336:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Start the first task. */
 337:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	prvPortStartFirstTask();
 338:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 339:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 340:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	exit error function to prevent compiler warnings about a static function
 341:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	not being called in the case that the application writer overrides this
 342:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS.  Call
 343:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	vTaskSwitchContext() so link time optimisation does not remove the
 344:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	symbol. */
 345:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	vTaskSwitchContext();
 346:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	prvTaskExitError();
 347:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 348:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Should not get here! */
 349:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	return 0;
 350:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** }
 351:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 352:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 14


 353:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** void vPortEndScheduler( void )
 354:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** {
 186              		.loc 1 354 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191 0000 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE73:
 194              		.size	vPortEndScheduler, .-vPortEndScheduler
 195 0002 00BF     		.section	.text.vPortEnterCritical,"ax",%progbits
 196              		.align	2
 197              		.global	vPortEnterCritical
 198              		.thumb
 199              		.thumb_func
 200              		.type	vPortEnterCritical, %function
 201              	vPortEnterCritical:
 202              	.LFB74:
 355:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 356:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	Artificially force an assert. */
 357:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 358:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** }
 359:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 360:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 361:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** void vPortEnterCritical( void )
 362:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** {
 203              		.loc 1 362 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              		@ link register save eliminated.
 208              	.LBB14:
 209              	.LBB15:
 210              		.loc 2 195 0
 211              		.syntax unified
 212              	@ 195 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 213 0000 4FF0A003 			mov r3, #160												
 214 0004 83F31188 		msr basepri, r3											
 215 0008 BFF36F8F 		isb														
 216 000c BFF34F8F 		dsb														
 217              	
 218              	@ 0 "" 2
 219              		.thumb
 220              		.syntax unified
 221              	.LBE15:
 222              	.LBE14:
 363:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 364:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting++;
 223              		.loc 1 364 0
 224 0010 024A     		ldr	r2, .L11
 225 0012 1368     		ldr	r3, [r2]
 226 0014 0133     		adds	r3, r3, #1
 227 0016 1360     		str	r3, [r2]
 228 0018 7047     		bx	lr
 229              	.L12:
 230 001a 00BF     		.align	2
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 15


 231              	.L11:
 232 001c 00000000 		.word	.LANCHOR0
 233              		.cfi_endproc
 234              	.LFE74:
 235              		.size	vPortEnterCritical, .-vPortEnterCritical
 236              		.section	.text.vPortExitCritical,"ax",%progbits
 237              		.align	2
 238              		.global	vPortExitCritical
 239              		.thumb
 240              		.thumb_func
 241              		.type	vPortExitCritical, %function
 242              	vPortExitCritical:
 243              	.LFB75:
 365:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 366:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 367:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 368:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 369:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 370:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	assert function also uses a critical section. */
 371:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	if( uxCriticalNesting == 1 )
 372:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	{
 373:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 374:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	}
 375:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** }
 376:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 377:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 378:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** void vPortExitCritical( void )
 379:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** {
 244              		.loc 1 379 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 380:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting );
 381:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting--;
 249              		.loc 1 381 0
 250 0000 034A     		ldr	r2, .L15
 251 0002 1368     		ldr	r3, [r2]
 252 0004 013B     		subs	r3, r3, #1
 253 0006 1360     		str	r3, [r2]
 382:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 254              		.loc 1 382 0
 255 0008 0BB9     		cbnz	r3, .L13
 256              	.LVL8:
 257              	.LBB16:
 258              	.LBB17:
 196:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 197:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 203:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 204:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 205:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 16


 207:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 209:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 211:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 212:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 213:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 220:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 221:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 223:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 224:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 225:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 227:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 229:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 259              		.loc 2 229 0
 260              		.syntax unified
 261              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 262 000a 83F31188 			msr basepri, r3	
 263              	@ 0 "" 2
 264              	.LVL9:
 265              		.thumb
 266              		.syntax unified
 267              	.L13:
 268 000e 7047     		bx	lr
 269              	.L16:
 270              		.align	2
 271              	.L15:
 272 0010 00000000 		.word	.LANCHOR0
 273              	.LBE17:
 274              	.LBE16:
 275              		.cfi_endproc
 276              	.LFE75:
 277              		.size	vPortExitCritical, .-vPortExitCritical
 278              		.section	.text.xPortPendSVHandler,"ax",%progbits
 279              		.align	2
 280              		.global	xPortPendSVHandler
 281              		.thumb
 282              		.thumb_func
 283              		.type	xPortPendSVHandler, %function
 284              	xPortPendSVHandler:
 285              	.LFB76:
 383:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	{
 384:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 385:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	}
 386:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** }
 387:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 388:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 389:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void )
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 17


 390:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** {
 286              		.loc 1 390 0
 287              		.cfi_startproc
 288              		@ Naked Function: prologue and epilogue provided by programmer.
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 391:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* This is a naked function. */
 392:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 393:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile
 291              		.loc 1 393 0
 292              		.syntax unified
 293              	@ 393 "..\FreeRTOS\Source\portable\GCC\ARM_CM3\port.c" 1
 294 0000 EFF30980 			mrs r0, psp							
 295 0004 BFF36F8F 		isb									
 296              											
 297 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 298 000a 1A68     		ldr	r2, [r3]						
 299              											
 300 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 301 0010 1060     		str r0, [r2]						
 302              											
 303 0012 2DE90840 		stmdb sp!, {r3, r14}				
 304 0016 4FF0A000 		mov r0, #160							
 305 001a 80F31188 		msr basepri, r0						
 306 001e FFF7FEFF 		bl vTaskSwitchContext				
 307 0022 4FF00000 		mov r0, #0							
 308 0026 80F31188 		msr basepri, r0						
 309 002a BDE80840 		ldmia sp!, {r3, r14}				
 310              											
 311 002e 1968     		ldr r1, [r3]						
 312 0030 0868     		ldr r0, [r1]						
 313 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 314 0036 80F30988 		msr psp, r0							
 315 003a BFF36F8F 		isb									
 316 003e 7047     		bx r14								
 317              											
 318              		.align 4							
 319 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 320              	
 321              	@ 0 "" 2
 394:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	(
 395:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 396:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	isb									\n"
 397:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 398:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 399:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 400:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 401:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 402:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 403:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 404:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 405:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 406:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 407:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 408:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 409:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 410:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 18


 411:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n" /* Restore the context, including the critical nesting count. */
 412:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 413:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 414:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 415:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 416:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	isb									\n"
 417:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	bx r14								\n"
 418:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 419:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"	.align 4							\n"
 420:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 421:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 422:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	);
 423:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** }
 322              		.loc 1 423 0
 323              		.thumb
 324              		.syntax unified
 325              		.cfi_endproc
 326              	.LFE76:
 327              		.size	xPortPendSVHandler, .-xPortPendSVHandler
 328              		.section	.text.xPortSysTickHandler,"ax",%progbits
 329              		.align	2
 330              		.global	xPortSysTickHandler
 331              		.thumb
 332              		.thumb_func
 333              		.type	xPortSysTickHandler, %function
 334              	xPortSysTickHandler:
 335              	.LFB77:
 424:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 425:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 426:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void )
 427:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** {
 336              		.loc 1 427 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340 0000 08B5     		push	{r3, lr}
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 3, -8
 343              		.cfi_offset 14, -4
 344              	.LBB18:
 345              	.LBB19:
 195:..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 346              		.loc 2 195 0
 347              		.syntax unified
 348              	@ 195 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 349 0002 4FF0A003 			mov r3, #160												
 350 0006 83F31188 		msr basepri, r3											
 351 000a BFF36F8F 		isb														
 352 000e BFF34F8F 		dsb														
 353              	
 354              	@ 0 "" 2
 355              		.thumb
 356              		.syntax unified
 357              	.LBE19:
 358              	.LBE18:
 428:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 429:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 19


 430:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	save and then restore the interrupt mask value as its value is already
 431:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	known. */
 432:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 433:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	{
 434:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* Increment the RTOS tick. */
 435:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 359              		.loc 1 435 0
 360 0012 FFF7FEFF 		bl	xTaskIncrementTick
 361              	.LVL10:
 362 0016 18B1     		cbz	r0, .L19
 436:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		{
 437:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* A context switch is required.  Context switching is performed in
 438:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 439:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 363              		.loc 1 439 0
 364 0018 4FF08052 		mov	r2, #268435456
 365 001c 024B     		ldr	r3, .L21
 366 001e 1A60     		str	r2, [r3]
 367              	.L19:
 368              	.LVL11:
 369              	.LBB20:
 370              	.LBB21:
 371              		.loc 2 229 0
 372 0020 0023     		movs	r3, #0
 373              		.syntax unified
 374              	@ 229 "..\FreeRTOS\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 375 0022 83F31188 			msr basepri, r3	
 376              	@ 0 "" 2
 377              	.LVL12:
 378              		.thumb
 379              		.syntax unified
 380 0026 08BD     		pop	{r3, pc}
 381              	.L22:
 382              		.align	2
 383              	.L21:
 384 0028 04ED00E0 		.word	-536810236
 385              	.LBE21:
 386              	.LBE20:
 387              		.cfi_endproc
 388              	.LFE77:
 389              		.size	xPortSysTickHandler, .-xPortSysTickHandler
 390              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 391              		.align	2
 392              		.weak	vPortSetupTimerInterrupt
 393              		.thumb
 394              		.thumb_func
 395              		.type	vPortSetupTimerInterrupt, %function
 396              	vPortSetupTimerInterrupt:
 397              	.LFB78:
 440:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		}
 441:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	}
 442:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	portENABLE_INTERRUPTS();
 443:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** }
 444:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 445:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 446:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 447:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 20


 448:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 449:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	{
 450:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 451:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	TickType_t xModifiableIdleTime;
 452:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 453:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 454:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 455:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		{
 456:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 457:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		}
 458:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 459:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 460:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 461:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 462:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		kernel with respect to calendar time. */
 463:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 464:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 465:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 466:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		tick periods.  -1 is used because this code will execute part way
 467:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		through one of the tick periods. */
 468:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 469:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 470:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		{
 471:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 472:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		}
 473:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 474:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 475:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 476:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "cpsid i" ::: "memory" );
 477:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "dsb" );
 478:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "isb" );
 479:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 480:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 481:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		to be unsuspended then abandon the low power entry. */
 482:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 483:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		{
 484:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart from whatever is left in the count register to complete
 485:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			this tick period. */
 486:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 487:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 488:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick. */
 489:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 490:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 491:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Reset the reload register to the value required for normal tick
 492:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			periods. */
 493:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 494:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 495:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 496:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			above. */
 497:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 498:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		}
 499:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		else
 500:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		{
 501:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Set the new reload value. */
 502:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 503:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 504:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Clear the SysTick count flag and set the count value back to
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 21


 505:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			zero. */
 506:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 507:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 508:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick. */
 509:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 510:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 511:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 512:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 513:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 514:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			should not be executed again.  However, the original expected idle
 515:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 516:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 517:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 518:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			if( xModifiableIdleTime > 0 )
 519:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			{
 520:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "dsb" ::: "memory" );
 521:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "wfi" );
 522:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "isb" );
 523:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			}
 524:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 525:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 526:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Re-enable interrupts to allow the interrupt that brought the MCU
 527:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			out of sleep mode to execute immediately.  see comments above
 528:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			__disable_interrupt() call above. */
 529:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 530:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "dsb" );
 531:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "isb" );
 532:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 533:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Disable interrupts again because the clock is about to be stopped
 534:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			and interrupts that execute while the clock is stopped will increase
 535:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			any slippage between the time maintained by the RTOS and calendar
 536:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			time. */
 537:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsid i" ::: "memory" );
 538:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "dsb" );
 539:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "isb" );
 540:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 541:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Disable the SysTick clock without reading the
 542:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG register to ensure the
 543:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 544:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			the time the SysTick is stopped for is accounted for as best it can
 545:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			be, but using the tickless mode will inevitably result in some tiny
 546:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			drift of the time maintained by the kernel with respect to calendar
 547:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			time*/
 548:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 549:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 550:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Determine if the SysTick clock has already counted to zero and
 551:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			been set back to the current reload value (the reload back being
 552:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			correct for the entire expected idle time) or if the SysTick is yet
 553:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			to count to zero (in which case an interrupt other than the SysTick
 554:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			must have brought the system out of sleep mode). */
 555:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 556:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			{
 557:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				uint32_t ulCalculatedLoadValue;
 558:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 559:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				/* The tick interrupt is already pending, and the SysTick count
 560:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				reloaded with ulReloadValue.  Reset the
 561:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 22


 562:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				period. */
 563:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 564:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 565:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 566:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				underflowed because the post sleep hook did something
 567:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				that took too long. */
 568:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 569:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				{
 570:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 571:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				}
 572:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 573:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 574:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 575:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				/* As the pending tick will be processed as soon as this
 576:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				function exits, the tick value maintained by the tick is stepped
 577:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				forward by one less than the time spent waiting. */
 578:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 579:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			}
 580:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			else
 581:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			{
 582:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 583:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 584:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				periods (not the ulReload value which accounted for part
 585:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				ticks). */
 586:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 587:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 588:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				/* How many complete tick periods passed while the processor
 589:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				was waiting? */
 590:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 591:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 592:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 593:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				period remains. */
 594:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 595:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			}
 596:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 597:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 598:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 599:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			value. */
 600:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 601:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 602:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			vTaskStepTick( ulCompleteTickPeriods );
 603:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 604:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 605:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			/* Exit with interrpts enabled. */
 606:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 607:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		}
 608:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	}
 609:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 610:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 611:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 612:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 613:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*
 614:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 615:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  * frequency.
 616:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c ****  */
 617:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 618:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** {
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 23


 398              		.loc 1 618 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              		@ link register save eliminated.
 619:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 620:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	#if( configUSE_TICKLESS_IDLE == 1 )
 621:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	{
 622:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 623:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 624:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 625:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	}
 626:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 627:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 628:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Stop and clear the SysTick. */
 629:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = 0UL;
 403              		.loc 1 629 0
 404 0000 054B     		ldr	r3, .L24
 405 0002 0022     		movs	r2, #0
 406 0004 1A60     		str	r2, [r3]
 630:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 407              		.loc 1 630 0
 408 0006 0549     		ldr	r1, .L24+4
 409 0008 0A60     		str	r2, [r1]
 631:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 632:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 633:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 410              		.loc 1 633 0
 411 000a 45F6BF51 		movw	r1, #23999
 412 000e 044A     		ldr	r2, .L24+8
 413 0010 1160     		str	r1, [r2]
 634:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 414              		.loc 1 634 0
 415 0012 0722     		movs	r2, #7
 416 0014 1A60     		str	r2, [r3]
 417 0016 7047     		bx	lr
 418              	.L25:
 419              		.align	2
 420              	.L24:
 421 0018 10E000E0 		.word	-536813552
 422 001c 18E000E0 		.word	-536813544
 423 0020 14E000E0 		.word	-536813548
 424              		.cfi_endproc
 425              	.LFE78:
 426              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 427              		.section	.text.xPortStartScheduler,"ax",%progbits
 428              		.align	2
 429              		.global	xPortStartScheduler
 430              		.thumb
 431              		.thumb_func
 432              		.type	xPortStartScheduler, %function
 433              	xPortStartScheduler:
 434              	.LFB72:
 258:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 435              		.loc 1 258 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 24


 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439 0000 10B5     		push	{r4, lr}
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 4, -8
 442              		.cfi_offset 14, -4
 326:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 443              		.loc 1 326 0
 444 0002 0B4B     		ldr	r3, .L28
 445 0004 1A68     		ldr	r2, [r3]
 446 0006 42F46002 		orr	r2, r2, #14680064
 447 000a 1A60     		str	r2, [r3]
 327:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 448              		.loc 1 327 0
 449 000c 1A68     		ldr	r2, [r3]
 450 000e 42F06042 		orr	r2, r2, #-536870912
 451 0012 1A60     		str	r2, [r3]
 331:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 452              		.loc 1 331 0
 453 0014 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 454              	.LVL13:
 334:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 455              		.loc 1 334 0
 456 0018 0024     		movs	r4, #0
 457 001a 064B     		ldr	r3, .L28+4
 458 001c 1C60     		str	r4, [r3]
 337:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 459              		.loc 1 337 0
 460 001e FFF7FEFF 		bl	prvPortStartFirstTask
 461              	.LVL14:
 345:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 	prvTaskExitError();
 462              		.loc 1 345 0
 463 0022 FFF7FEFF 		bl	vTaskSwitchContext
 464              	.LVL15:
 346:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** 
 465              		.loc 1 346 0
 466 0026 FFF7FEFF 		bl	prvTaskExitError
 467              	.LVL16:
 350:..\FreeRTOS\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 468              		.loc 1 350 0
 469 002a 2046     		mov	r0, r4
 470 002c 10BD     		pop	{r4, pc}
 471              	.L29:
 472 002e 00BF     		.align	2
 473              	.L28:
 474 0030 20ED00E0 		.word	-536810208
 475 0034 00000000 		.word	.LANCHOR0
 476              		.cfi_endproc
 477              	.LFE72:
 478              		.size	xPortStartScheduler, .-xPortStartScheduler
 479              		.data
 480              		.align	2
 481              		.set	.LANCHOR0,. + 0
 482              		.type	uxCriticalNesting, %object
 483              		.size	uxCriticalNesting, 4
 484              	uxCriticalNesting:
 485 0000 AAAAAAAA 		.word	-1431655766
 486              		.text
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 25


 487              	.Letext0:
 488              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 489              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 490              		.file 5 "..\\FreeRTOS\\Source\\include/projdefs.h"
 491              		.file 6 "..\\FreeRTOS\\Source\\include/task.h"
 492              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 493              		.section	.debug_info,"",%progbits
 494              	.Ldebug_info0:
 495 0000 5F030000 		.4byte	0x35f
 496 0004 0400     		.2byte	0x4
 497 0006 00000000 		.4byte	.Ldebug_abbrev0
 498 000a 04       		.byte	0x4
 499 000b 01       		.uleb128 0x1
 500 000c E4000000 		.4byte	.LASF41
 501 0010 0C       		.byte	0xc
 502 0011 A7000000 		.4byte	.LASF42
 503 0015 0D030000 		.4byte	.LASF43
 504 0019 00000000 		.4byte	.Ldebug_ranges0+0
 505 001d 00000000 		.4byte	0
 506 0021 00000000 		.4byte	.Ldebug_line0
 507 0025 02       		.uleb128 0x2
 508 0026 04       		.byte	0x4
 509 0027 05       		.byte	0x5
 510 0028 696E7400 		.ascii	"int\000"
 511 002c 03       		.uleb128 0x3
 512 002d 04       		.byte	0x4
 513 002e 07       		.byte	0x7
 514 002f 07020000 		.4byte	.LASF0
 515 0033 03       		.uleb128 0x3
 516 0034 08       		.byte	0x8
 517 0035 05       		.byte	0x5
 518 0036 7D020000 		.4byte	.LASF1
 519 003a 03       		.uleb128 0x3
 520 003b 08       		.byte	0x8
 521 003c 04       		.byte	0x4
 522 003d 01030000 		.4byte	.LASF2
 523 0041 03       		.uleb128 0x3
 524 0042 01       		.byte	0x1
 525 0043 06       		.byte	0x6
 526 0044 42030000 		.4byte	.LASF3
 527 0048 03       		.uleb128 0x3
 528 0049 01       		.byte	0x1
 529 004a 08       		.byte	0x8
 530 004b D6000000 		.4byte	.LASF4
 531 004f 03       		.uleb128 0x3
 532 0050 02       		.byte	0x2
 533 0051 05       		.byte	0x5
 534 0052 AC020000 		.4byte	.LASF5
 535 0056 03       		.uleb128 0x3
 536 0057 02       		.byte	0x2
 537 0058 07       		.byte	0x7
 538 0059 8F010000 		.4byte	.LASF6
 539 005d 04       		.uleb128 0x4
 540 005e 49000000 		.4byte	.LASF8
 541 0062 03       		.byte	0x3
 542 0063 3F       		.byte	0x3f
 543 0064 68000000 		.4byte	0x68
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 26


 544 0068 03       		.uleb128 0x3
 545 0069 04       		.byte	0x4
 546 006a 05       		.byte	0x5
 547 006b 53000000 		.4byte	.LASF7
 548 006f 04       		.uleb128 0x4
 549 0070 72010000 		.4byte	.LASF9
 550 0074 03       		.byte	0x3
 551 0075 41       		.byte	0x41
 552 0076 7A000000 		.4byte	0x7a
 553 007a 03       		.uleb128 0x3
 554 007b 04       		.byte	0x4
 555 007c 07       		.byte	0x7
 556 007d 7D010000 		.4byte	.LASF10
 557 0081 03       		.uleb128 0x3
 558 0082 08       		.byte	0x8
 559 0083 07       		.byte	0x7
 560 0084 21020000 		.4byte	.LASF11
 561 0088 04       		.uleb128 0x4
 562 0089 7E000000 		.4byte	.LASF12
 563 008d 04       		.byte	0x4
 564 008e 2C       		.byte	0x2c
 565 008f 5D000000 		.4byte	0x5d
 566 0093 04       		.uleb128 0x4
 567 0094 C8020000 		.4byte	.LASF13
 568 0098 04       		.byte	0x4
 569 0099 30       		.byte	0x30
 570 009a 6F000000 		.4byte	0x6f
 571 009e 03       		.uleb128 0x3
 572 009f 04       		.byte	0x4
 573 00a0 04       		.byte	0x4
 574 00a1 86000000 		.4byte	.LASF14
 575 00a5 03       		.uleb128 0x3
 576 00a6 08       		.byte	0x8
 577 00a7 04       		.byte	0x4
 578 00a8 AF010000 		.4byte	.LASF15
 579 00ac 03       		.uleb128 0x3
 580 00ad 01       		.byte	0x1
 581 00ae 08       		.byte	0x8
 582 00af 8B020000 		.4byte	.LASF16
 583 00b3 03       		.uleb128 0x3
 584 00b4 04       		.byte	0x4
 585 00b5 07       		.byte	0x7
 586 00b6 74020000 		.4byte	.LASF17
 587 00ba 05       		.uleb128 0x5
 588 00bb 04       		.byte	0x4
 589 00bc 06       		.uleb128 0x6
 590 00bd 93000000 		.4byte	0x93
 591 00c1 04       		.uleb128 0x4
 592 00c2 6F000000 		.4byte	.LASF18
 593 00c6 05       		.byte	0x5
 594 00c7 23       		.byte	0x23
 595 00c8 CC000000 		.4byte	0xcc
 596 00cc 07       		.uleb128 0x7
 597 00cd 04       		.byte	0x4
 598 00ce D2000000 		.4byte	0xd2
 599 00d2 08       		.uleb128 0x8
 600 00d3 DD000000 		.4byte	0xdd
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 27


 601 00d7 09       		.uleb128 0x9
 602 00d8 BA000000 		.4byte	0xba
 603 00dc 00       		.byte	0
 604 00dd 04       		.uleb128 0x4
 605 00de 90020000 		.4byte	.LASF19
 606 00e2 02       		.byte	0x2
 607 00e3 37       		.byte	0x37
 608 00e4 93000000 		.4byte	0x93
 609 00e8 04       		.uleb128 0x4
 610 00e9 E0020000 		.4byte	.LASF20
 611 00ed 02       		.byte	0x2
 612 00ee 38       		.byte	0x38
 613 00ef 68000000 		.4byte	0x68
 614 00f3 04       		.uleb128 0x4
 615 00f4 62030000 		.4byte	.LASF21
 616 00f8 02       		.byte	0x2
 617 00f9 39       		.byte	0x39
 618 00fa 7A000000 		.4byte	0x7a
 619 00fe 04       		.uleb128 0x4
 620 00ff 3E000000 		.4byte	.LASF22
 621 0103 02       		.byte	0x2
 622 0104 3F       		.byte	0x3f
 623 0105 93000000 		.4byte	0x93
 624 0109 07       		.uleb128 0x7
 625 010a 04       		.byte	0x4
 626 010b DD000000 		.4byte	0xdd
 627 010f 0A       		.uleb128 0xa
 628 0110 38020000 		.4byte	.LASF23
 629 0114 02       		.byte	0x2
 630 0115 BF       		.byte	0xbf
 631 0116 03       		.byte	0x3
 632 0117 27010000 		.4byte	0x127
 633 011b 0B       		.uleb128 0xb
 634 011c B6010000 		.4byte	.LASF44
 635 0120 02       		.byte	0x2
 636 0121 C1       		.byte	0xc1
 637 0122 93000000 		.4byte	0x93
 638 0126 00       		.byte	0
 639 0127 0A       		.uleb128 0xa
 640 0128 E3010000 		.4byte	.LASF24
 641 012c 02       		.byte	0x2
 642 012d E3       		.byte	0xe3
 643 012e 03       		.byte	0x3
 644 012f 3F010000 		.4byte	0x13f
 645 0133 0C       		.uleb128 0xc
 646 0134 D1020000 		.4byte	.LASF45
 647 0138 02       		.byte	0x2
 648 0139 E3       		.byte	0xe3
 649 013a 93000000 		.4byte	0x93
 650 013e 00       		.byte	0
 651 013f 0D       		.uleb128 0xd
 652 0140 4A020000 		.4byte	.LASF46
 653 0144 01       		.byte	0x1
 654 0145 C0       		.byte	0xc0
 655 0146 00000000 		.4byte	.LFB69
 656 014a 20000000 		.4byte	.LFE69-.LFB69
 657 014e 01       		.uleb128 0x1
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 28


 658 014f 9C       		.byte	0x9c
 659 0150 82010000 		.4byte	0x182
 660 0154 0E       		.uleb128 0xe
 661 0155 9F000000 		.4byte	.LASF37
 662 0159 01       		.byte	0x1
 663 015a C2       		.byte	0xc2
 664 015b BC000000 		.4byte	0xbc
 665 015f 02       		.uleb128 0x2
 666 0160 91       		.byte	0x91
 667 0161 7C       		.sleb128 -4
 668 0162 0F       		.uleb128 0xf
 669 0163 0F010000 		.4byte	0x10f
 670 0167 06000000 		.4byte	.LBB12
 671 016b 10000000 		.4byte	.LBE12-.LBB12
 672 016f 01       		.byte	0x1
 673 0170 CB       		.byte	0xcb
 674 0171 10       		.uleb128 0x10
 675 0172 06000000 		.4byte	.LBB13
 676 0176 10000000 		.4byte	.LBE13-.LBB13
 677 017a 11       		.uleb128 0x11
 678 017b 1B010000 		.4byte	0x11b
 679 017f 00       		.byte	0
 680 0180 00       		.byte	0
 681 0181 00       		.byte	0
 682 0182 12       		.uleb128 0x12
 683 0183 EB020000 		.4byte	.LASF47
 684 0187 01       		.byte	0x1
 685 0188 ED       		.byte	0xed
 686 0189 00000000 		.4byte	.LFB71
 687 018d 1A000000 		.4byte	.LFE71-.LFB71
 688 0191 01       		.uleb128 0x1
 689 0192 9C       		.byte	0x9c
 690 0193 13       		.uleb128 0x13
 691 0194 6E030000 		.4byte	.LASF35
 692 0198 01       		.byte	0x1
 693 0199 AE       		.byte	0xae
 694 019a 09010000 		.4byte	0x109
 695 019e 00000000 		.4byte	.LFB68
 696 01a2 24000000 		.4byte	.LFE68-.LFB68
 697 01a6 01       		.uleb128 0x1
 698 01a7 9C       		.byte	0x9c
 699 01a8 D8010000 		.4byte	0x1d8
 700 01ac 14       		.uleb128 0x14
 701 01ad 14020000 		.4byte	.LASF25
 702 01b1 01       		.byte	0x1
 703 01b2 AE       		.byte	0xae
 704 01b3 09010000 		.4byte	0x109
 705 01b7 00000000 		.4byte	.LLST0
 706 01bb 14       		.uleb128 0x14
 707 01bc 25000000 		.4byte	.LASF26
 708 01c0 01       		.byte	0x1
 709 01c1 AE       		.byte	0xae
 710 01c2 C1000000 		.4byte	0xc1
 711 01c6 5F000000 		.4byte	.LLST1
 712 01ca 15       		.uleb128 0x15
 713 01cb C3010000 		.4byte	.LASF27
 714 01cf 01       		.byte	0x1
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 29


 715 01d0 AE       		.byte	0xae
 716 01d1 BA000000 		.4byte	0xba
 717 01d5 01       		.uleb128 0x1
 718 01d6 52       		.byte	0x52
 719 01d7 00       		.byte	0
 720 01d8 16       		.uleb128 0x16
 721 01d9 9C020000 		.4byte	.LASF28
 722 01dd 01       		.byte	0x1
 723 01de D9       		.byte	0xd9
 724 01df 00000000 		.4byte	.LFB70
 725 01e3 24000000 		.4byte	.LFE70-.LFB70
 726 01e7 01       		.uleb128 0x1
 727 01e8 9C       		.byte	0x9c
 728 01e9 17       		.uleb128 0x17
 729 01ea 2C000000 		.4byte	.LASF29
 730 01ee 01       		.byte	0x1
 731 01ef 6101     		.2byte	0x161
 732 01f1 00000000 		.4byte	.LFB73
 733 01f5 02000000 		.4byte	.LFE73-.LFB73
 734 01f9 01       		.uleb128 0x1
 735 01fa 9C       		.byte	0x9c
 736 01fb 18       		.uleb128 0x18
 737 01fc 12000000 		.4byte	.LASF30
 738 0200 01       		.byte	0x1
 739 0201 6901     		.2byte	0x169
 740 0203 00000000 		.4byte	.LFB74
 741 0207 20000000 		.4byte	.LFE74-.LFB74
 742 020b 01       		.uleb128 0x1
 743 020c 9C       		.byte	0x9c
 744 020d 32020000 		.4byte	0x232
 745 0211 19       		.uleb128 0x19
 746 0212 0F010000 		.4byte	0x10f
 747 0216 00000000 		.4byte	.LBB14
 748 021a 10000000 		.4byte	.LBE14-.LBB14
 749 021e 01       		.byte	0x1
 750 021f 6B01     		.2byte	0x16b
 751 0221 10       		.uleb128 0x10
 752 0222 00000000 		.4byte	.LBB15
 753 0226 10000000 		.4byte	.LBE15-.LBB15
 754 022a 11       		.uleb128 0x11
 755 022b 1B010000 		.4byte	0x11b
 756 022f 00       		.byte	0
 757 0230 00       		.byte	0
 758 0231 00       		.byte	0
 759 0232 18       		.uleb128 0x18
 760 0233 B6020000 		.4byte	.LASF31
 761 0237 01       		.byte	0x1
 762 0238 7A01     		.2byte	0x17a
 763 023a 00000000 		.4byte	.LFB75
 764 023e 14000000 		.4byte	.LFE75-.LFB75
 765 0242 01       		.uleb128 0x1
 766 0243 9C       		.byte	0x9c
 767 0244 63020000 		.4byte	0x263
 768 0248 19       		.uleb128 0x19
 769 0249 27010000 		.4byte	0x127
 770 024d 0A000000 		.4byte	.LBB16
 771 0251 0A000000 		.4byte	.LBE16-.LBB16
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 30


 772 0255 01       		.byte	0x1
 773 0256 8001     		.2byte	0x180
 774 0258 1A       		.uleb128 0x1a
 775 0259 33010000 		.4byte	0x133
 776 025d 80000000 		.4byte	.LLST2
 777 0261 00       		.byte	0
 778 0262 00       		.byte	0
 779 0263 17       		.uleb128 0x17
 780 0264 5C000000 		.4byte	.LASF32
 781 0268 01       		.byte	0x1
 782 0269 8501     		.2byte	0x185
 783 026b 00000000 		.4byte	.LFB76
 784 026f 44000000 		.4byte	.LFE76-.LFB76
 785 0273 01       		.uleb128 0x1
 786 0274 9C       		.byte	0x9c
 787 0275 18       		.uleb128 0x18
 788 0276 F3010000 		.4byte	.LASF33
 789 027a 01       		.byte	0x1
 790 027b AA01     		.2byte	0x1aa
 791 027d 00000000 		.4byte	.LFB77
 792 0281 2C000000 		.4byte	.LFE77-.LFB77
 793 0285 01       		.uleb128 0x1
 794 0286 9C       		.byte	0x9c
 795 0287 D7020000 		.4byte	0x2d7
 796 028b 1B       		.uleb128 0x1b
 797 028c 0F010000 		.4byte	0x10f
 798 0290 02000000 		.4byte	.LBB18
 799 0294 10000000 		.4byte	.LBE18-.LBB18
 800 0298 01       		.byte	0x1
 801 0299 B001     		.2byte	0x1b0
 802 029b AF020000 		.4byte	0x2af
 803 029f 10       		.uleb128 0x10
 804 02a0 02000000 		.4byte	.LBB19
 805 02a4 10000000 		.4byte	.LBE19-.LBB19
 806 02a8 11       		.uleb128 0x11
 807 02a9 1B010000 		.4byte	0x11b
 808 02ad 00       		.byte	0
 809 02ae 00       		.byte	0
 810 02af 1B       		.uleb128 0x1b
 811 02b0 27010000 		.4byte	0x127
 812 02b4 20000000 		.4byte	.LBB20
 813 02b8 0C000000 		.4byte	.LBE20-.LBB20
 814 02bc 01       		.byte	0x1
 815 02bd BA01     		.2byte	0x1ba
 816 02bf CD020000 		.4byte	0x2cd
 817 02c3 1A       		.uleb128 0x1a
 818 02c4 33010000 		.4byte	0x133
 819 02c8 94000000 		.4byte	.LLST3
 820 02cc 00       		.byte	0
 821 02cd 1C       		.uleb128 0x1c
 822 02ce 16000000 		.4byte	.LVL10
 823 02d2 4A030000 		.4byte	0x34a
 824 02d6 00       		.byte	0
 825 02d7 17       		.uleb128 0x17
 826 02d8 5B020000 		.4byte	.LASF34
 827 02dc 01       		.byte	0x1
 828 02dd 6902     		.2byte	0x269
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 31


 829 02df 00000000 		.4byte	.LFB78
 830 02e3 24000000 		.4byte	.LFE78-.LFB78
 831 02e7 01       		.uleb128 0x1
 832 02e8 9C       		.byte	0x9c
 833 02e9 1D       		.uleb128 0x1d
 834 02ea 4E030000 		.4byte	.LASF36
 835 02ee 01       		.byte	0x1
 836 02ef 0101     		.2byte	0x101
 837 02f1 E8000000 		.4byte	0xe8
 838 02f5 00000000 		.4byte	.LFB72
 839 02f9 38000000 		.4byte	.LFE72-.LFB72
 840 02fd 01       		.uleb128 0x1
 841 02fe 9C       		.byte	0x9c
 842 02ff 28030000 		.4byte	0x328
 843 0303 1C       		.uleb128 0x1c
 844 0304 18000000 		.4byte	.LVL13
 845 0308 D7020000 		.4byte	0x2d7
 846 030c 1C       		.uleb128 0x1c
 847 030d 22000000 		.4byte	.LVL14
 848 0311 82010000 		.4byte	0x182
 849 0315 1C       		.uleb128 0x1c
 850 0316 26000000 		.4byte	.LVL15
 851 031a 56030000 		.4byte	0x356
 852 031e 1C       		.uleb128 0x1c
 853 031f 2A000000 		.4byte	.LVL16
 854 0323 3F010000 		.4byte	0x13f
 855 0327 00       		.byte	0
 856 0328 0E       		.uleb128 0xe
 857 0329 00000000 		.4byte	.LASF38
 858 032d 01       		.byte	0x1
 859 032e 85       		.byte	0x85
 860 032f F3000000 		.4byte	0xf3
 861 0333 05       		.uleb128 0x5
 862 0334 03       		.byte	0x3
 863 0335 00000000 		.4byte	uxCriticalNesting
 864 0339 1E       		.uleb128 0x1e
 865 033a A2010000 		.4byte	.LASF48
 866 033e 07       		.byte	0x7
 867 033f 1207     		.2byte	0x712
 868 0341 45030000 		.4byte	0x345
 869 0345 06       		.uleb128 0x6
 870 0346 88000000 		.4byte	0x88
 871 034a 1F       		.uleb128 0x1f
 872 034b D0010000 		.4byte	.LASF39
 873 034f D0010000 		.4byte	.LASF39
 874 0353 06       		.byte	0x6
 875 0354 5C08     		.2byte	0x85c
 876 0356 1F       		.uleb128 0x1f
 877 0357 8C000000 		.4byte	.LASF40
 878 035b 8C000000 		.4byte	.LASF40
 879 035f 06       		.byte	0x6
 880 0360 B008     		.2byte	0x8b0
 881 0362 00       		.byte	0
 882              		.section	.debug_abbrev,"",%progbits
 883              	.Ldebug_abbrev0:
 884 0000 01       		.uleb128 0x1
 885 0001 11       		.uleb128 0x11
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 32


 886 0002 01       		.byte	0x1
 887 0003 25       		.uleb128 0x25
 888 0004 0E       		.uleb128 0xe
 889 0005 13       		.uleb128 0x13
 890 0006 0B       		.uleb128 0xb
 891 0007 03       		.uleb128 0x3
 892 0008 0E       		.uleb128 0xe
 893 0009 1B       		.uleb128 0x1b
 894 000a 0E       		.uleb128 0xe
 895 000b 55       		.uleb128 0x55
 896 000c 17       		.uleb128 0x17
 897 000d 11       		.uleb128 0x11
 898 000e 01       		.uleb128 0x1
 899 000f 10       		.uleb128 0x10
 900 0010 17       		.uleb128 0x17
 901 0011 00       		.byte	0
 902 0012 00       		.byte	0
 903 0013 02       		.uleb128 0x2
 904 0014 24       		.uleb128 0x24
 905 0015 00       		.byte	0
 906 0016 0B       		.uleb128 0xb
 907 0017 0B       		.uleb128 0xb
 908 0018 3E       		.uleb128 0x3e
 909 0019 0B       		.uleb128 0xb
 910 001a 03       		.uleb128 0x3
 911 001b 08       		.uleb128 0x8
 912 001c 00       		.byte	0
 913 001d 00       		.byte	0
 914 001e 03       		.uleb128 0x3
 915 001f 24       		.uleb128 0x24
 916 0020 00       		.byte	0
 917 0021 0B       		.uleb128 0xb
 918 0022 0B       		.uleb128 0xb
 919 0023 3E       		.uleb128 0x3e
 920 0024 0B       		.uleb128 0xb
 921 0025 03       		.uleb128 0x3
 922 0026 0E       		.uleb128 0xe
 923 0027 00       		.byte	0
 924 0028 00       		.byte	0
 925 0029 04       		.uleb128 0x4
 926 002a 16       		.uleb128 0x16
 927 002b 00       		.byte	0
 928 002c 03       		.uleb128 0x3
 929 002d 0E       		.uleb128 0xe
 930 002e 3A       		.uleb128 0x3a
 931 002f 0B       		.uleb128 0xb
 932 0030 3B       		.uleb128 0x3b
 933 0031 0B       		.uleb128 0xb
 934 0032 49       		.uleb128 0x49
 935 0033 13       		.uleb128 0x13
 936 0034 00       		.byte	0
 937 0035 00       		.byte	0
 938 0036 05       		.uleb128 0x5
 939 0037 0F       		.uleb128 0xf
 940 0038 00       		.byte	0
 941 0039 0B       		.uleb128 0xb
 942 003a 0B       		.uleb128 0xb
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 33


 943 003b 00       		.byte	0
 944 003c 00       		.byte	0
 945 003d 06       		.uleb128 0x6
 946 003e 35       		.uleb128 0x35
 947 003f 00       		.byte	0
 948 0040 49       		.uleb128 0x49
 949 0041 13       		.uleb128 0x13
 950 0042 00       		.byte	0
 951 0043 00       		.byte	0
 952 0044 07       		.uleb128 0x7
 953 0045 0F       		.uleb128 0xf
 954 0046 00       		.byte	0
 955 0047 0B       		.uleb128 0xb
 956 0048 0B       		.uleb128 0xb
 957 0049 49       		.uleb128 0x49
 958 004a 13       		.uleb128 0x13
 959 004b 00       		.byte	0
 960 004c 00       		.byte	0
 961 004d 08       		.uleb128 0x8
 962 004e 15       		.uleb128 0x15
 963 004f 01       		.byte	0x1
 964 0050 27       		.uleb128 0x27
 965 0051 19       		.uleb128 0x19
 966 0052 01       		.uleb128 0x1
 967 0053 13       		.uleb128 0x13
 968 0054 00       		.byte	0
 969 0055 00       		.byte	0
 970 0056 09       		.uleb128 0x9
 971 0057 05       		.uleb128 0x5
 972 0058 00       		.byte	0
 973 0059 49       		.uleb128 0x49
 974 005a 13       		.uleb128 0x13
 975 005b 00       		.byte	0
 976 005c 00       		.byte	0
 977 005d 0A       		.uleb128 0xa
 978 005e 2E       		.uleb128 0x2e
 979 005f 01       		.byte	0x1
 980 0060 03       		.uleb128 0x3
 981 0061 0E       		.uleb128 0xe
 982 0062 3A       		.uleb128 0x3a
 983 0063 0B       		.uleb128 0xb
 984 0064 3B       		.uleb128 0x3b
 985 0065 0B       		.uleb128 0xb
 986 0066 27       		.uleb128 0x27
 987 0067 19       		.uleb128 0x19
 988 0068 20       		.uleb128 0x20
 989 0069 0B       		.uleb128 0xb
 990 006a 01       		.uleb128 0x1
 991 006b 13       		.uleb128 0x13
 992 006c 00       		.byte	0
 993 006d 00       		.byte	0
 994 006e 0B       		.uleb128 0xb
 995 006f 34       		.uleb128 0x34
 996 0070 00       		.byte	0
 997 0071 03       		.uleb128 0x3
 998 0072 0E       		.uleb128 0xe
 999 0073 3A       		.uleb128 0x3a
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 34


 1000 0074 0B       		.uleb128 0xb
 1001 0075 3B       		.uleb128 0x3b
 1002 0076 0B       		.uleb128 0xb
 1003 0077 49       		.uleb128 0x49
 1004 0078 13       		.uleb128 0x13
 1005 0079 00       		.byte	0
 1006 007a 00       		.byte	0
 1007 007b 0C       		.uleb128 0xc
 1008 007c 05       		.uleb128 0x5
 1009 007d 00       		.byte	0
 1010 007e 03       		.uleb128 0x3
 1011 007f 0E       		.uleb128 0xe
 1012 0080 3A       		.uleb128 0x3a
 1013 0081 0B       		.uleb128 0xb
 1014 0082 3B       		.uleb128 0x3b
 1015 0083 0B       		.uleb128 0xb
 1016 0084 49       		.uleb128 0x49
 1017 0085 13       		.uleb128 0x13
 1018 0086 00       		.byte	0
 1019 0087 00       		.byte	0
 1020 0088 0D       		.uleb128 0xd
 1021 0089 2E       		.uleb128 0x2e
 1022 008a 01       		.byte	0x1
 1023 008b 03       		.uleb128 0x3
 1024 008c 0E       		.uleb128 0xe
 1025 008d 3A       		.uleb128 0x3a
 1026 008e 0B       		.uleb128 0xb
 1027 008f 3B       		.uleb128 0x3b
 1028 0090 0B       		.uleb128 0xb
 1029 0091 27       		.uleb128 0x27
 1030 0092 19       		.uleb128 0x19
 1031 0093 11       		.uleb128 0x11
 1032 0094 01       		.uleb128 0x1
 1033 0095 12       		.uleb128 0x12
 1034 0096 06       		.uleb128 0x6
 1035 0097 40       		.uleb128 0x40
 1036 0098 18       		.uleb128 0x18
 1037 0099 9742     		.uleb128 0x2117
 1038 009b 19       		.uleb128 0x19
 1039 009c 01       		.uleb128 0x1
 1040 009d 13       		.uleb128 0x13
 1041 009e 00       		.byte	0
 1042 009f 00       		.byte	0
 1043 00a0 0E       		.uleb128 0xe
 1044 00a1 34       		.uleb128 0x34
 1045 00a2 00       		.byte	0
 1046 00a3 03       		.uleb128 0x3
 1047 00a4 0E       		.uleb128 0xe
 1048 00a5 3A       		.uleb128 0x3a
 1049 00a6 0B       		.uleb128 0xb
 1050 00a7 3B       		.uleb128 0x3b
 1051 00a8 0B       		.uleb128 0xb
 1052 00a9 49       		.uleb128 0x49
 1053 00aa 13       		.uleb128 0x13
 1054 00ab 02       		.uleb128 0x2
 1055 00ac 18       		.uleb128 0x18
 1056 00ad 00       		.byte	0
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 35


 1057 00ae 00       		.byte	0
 1058 00af 0F       		.uleb128 0xf
 1059 00b0 1D       		.uleb128 0x1d
 1060 00b1 01       		.byte	0x1
 1061 00b2 31       		.uleb128 0x31
 1062 00b3 13       		.uleb128 0x13
 1063 00b4 11       		.uleb128 0x11
 1064 00b5 01       		.uleb128 0x1
 1065 00b6 12       		.uleb128 0x12
 1066 00b7 06       		.uleb128 0x6
 1067 00b8 58       		.uleb128 0x58
 1068 00b9 0B       		.uleb128 0xb
 1069 00ba 59       		.uleb128 0x59
 1070 00bb 0B       		.uleb128 0xb
 1071 00bc 00       		.byte	0
 1072 00bd 00       		.byte	0
 1073 00be 10       		.uleb128 0x10
 1074 00bf 0B       		.uleb128 0xb
 1075 00c0 01       		.byte	0x1
 1076 00c1 11       		.uleb128 0x11
 1077 00c2 01       		.uleb128 0x1
 1078 00c3 12       		.uleb128 0x12
 1079 00c4 06       		.uleb128 0x6
 1080 00c5 00       		.byte	0
 1081 00c6 00       		.byte	0
 1082 00c7 11       		.uleb128 0x11
 1083 00c8 34       		.uleb128 0x34
 1084 00c9 00       		.byte	0
 1085 00ca 31       		.uleb128 0x31
 1086 00cb 13       		.uleb128 0x13
 1087 00cc 00       		.byte	0
 1088 00cd 00       		.byte	0
 1089 00ce 12       		.uleb128 0x12
 1090 00cf 2E       		.uleb128 0x2e
 1091 00d0 00       		.byte	0
 1092 00d1 03       		.uleb128 0x3
 1093 00d2 0E       		.uleb128 0xe
 1094 00d3 3A       		.uleb128 0x3a
 1095 00d4 0B       		.uleb128 0xb
 1096 00d5 3B       		.uleb128 0x3b
 1097 00d6 0B       		.uleb128 0xb
 1098 00d7 27       		.uleb128 0x27
 1099 00d8 19       		.uleb128 0x19
 1100 00d9 11       		.uleb128 0x11
 1101 00da 01       		.uleb128 0x1
 1102 00db 12       		.uleb128 0x12
 1103 00dc 06       		.uleb128 0x6
 1104 00dd 40       		.uleb128 0x40
 1105 00de 18       		.uleb128 0x18
 1106 00df 9742     		.uleb128 0x2117
 1107 00e1 19       		.uleb128 0x19
 1108 00e2 00       		.byte	0
 1109 00e3 00       		.byte	0
 1110 00e4 13       		.uleb128 0x13
 1111 00e5 2E       		.uleb128 0x2e
 1112 00e6 01       		.byte	0x1
 1113 00e7 3F       		.uleb128 0x3f
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 36


 1114 00e8 19       		.uleb128 0x19
 1115 00e9 03       		.uleb128 0x3
 1116 00ea 0E       		.uleb128 0xe
 1117 00eb 3A       		.uleb128 0x3a
 1118 00ec 0B       		.uleb128 0xb
 1119 00ed 3B       		.uleb128 0x3b
 1120 00ee 0B       		.uleb128 0xb
 1121 00ef 27       		.uleb128 0x27
 1122 00f0 19       		.uleb128 0x19
 1123 00f1 49       		.uleb128 0x49
 1124 00f2 13       		.uleb128 0x13
 1125 00f3 11       		.uleb128 0x11
 1126 00f4 01       		.uleb128 0x1
 1127 00f5 12       		.uleb128 0x12
 1128 00f6 06       		.uleb128 0x6
 1129 00f7 40       		.uleb128 0x40
 1130 00f8 18       		.uleb128 0x18
 1131 00f9 9742     		.uleb128 0x2117
 1132 00fb 19       		.uleb128 0x19
 1133 00fc 01       		.uleb128 0x1
 1134 00fd 13       		.uleb128 0x13
 1135 00fe 00       		.byte	0
 1136 00ff 00       		.byte	0
 1137 0100 14       		.uleb128 0x14
 1138 0101 05       		.uleb128 0x5
 1139 0102 00       		.byte	0
 1140 0103 03       		.uleb128 0x3
 1141 0104 0E       		.uleb128 0xe
 1142 0105 3A       		.uleb128 0x3a
 1143 0106 0B       		.uleb128 0xb
 1144 0107 3B       		.uleb128 0x3b
 1145 0108 0B       		.uleb128 0xb
 1146 0109 49       		.uleb128 0x49
 1147 010a 13       		.uleb128 0x13
 1148 010b 02       		.uleb128 0x2
 1149 010c 17       		.uleb128 0x17
 1150 010d 00       		.byte	0
 1151 010e 00       		.byte	0
 1152 010f 15       		.uleb128 0x15
 1153 0110 05       		.uleb128 0x5
 1154 0111 00       		.byte	0
 1155 0112 03       		.uleb128 0x3
 1156 0113 0E       		.uleb128 0xe
 1157 0114 3A       		.uleb128 0x3a
 1158 0115 0B       		.uleb128 0xb
 1159 0116 3B       		.uleb128 0x3b
 1160 0117 0B       		.uleb128 0xb
 1161 0118 49       		.uleb128 0x49
 1162 0119 13       		.uleb128 0x13
 1163 011a 02       		.uleb128 0x2
 1164 011b 18       		.uleb128 0x18
 1165 011c 00       		.byte	0
 1166 011d 00       		.byte	0
 1167 011e 16       		.uleb128 0x16
 1168 011f 2E       		.uleb128 0x2e
 1169 0120 00       		.byte	0
 1170 0121 3F       		.uleb128 0x3f
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 37


 1171 0122 19       		.uleb128 0x19
 1172 0123 03       		.uleb128 0x3
 1173 0124 0E       		.uleb128 0xe
 1174 0125 3A       		.uleb128 0x3a
 1175 0126 0B       		.uleb128 0xb
 1176 0127 3B       		.uleb128 0x3b
 1177 0128 0B       		.uleb128 0xb
 1178 0129 27       		.uleb128 0x27
 1179 012a 19       		.uleb128 0x19
 1180 012b 11       		.uleb128 0x11
 1181 012c 01       		.uleb128 0x1
 1182 012d 12       		.uleb128 0x12
 1183 012e 06       		.uleb128 0x6
 1184 012f 40       		.uleb128 0x40
 1185 0130 18       		.uleb128 0x18
 1186 0131 9742     		.uleb128 0x2117
 1187 0133 19       		.uleb128 0x19
 1188 0134 00       		.byte	0
 1189 0135 00       		.byte	0
 1190 0136 17       		.uleb128 0x17
 1191 0137 2E       		.uleb128 0x2e
 1192 0138 00       		.byte	0
 1193 0139 3F       		.uleb128 0x3f
 1194 013a 19       		.uleb128 0x19
 1195 013b 03       		.uleb128 0x3
 1196 013c 0E       		.uleb128 0xe
 1197 013d 3A       		.uleb128 0x3a
 1198 013e 0B       		.uleb128 0xb
 1199 013f 3B       		.uleb128 0x3b
 1200 0140 05       		.uleb128 0x5
 1201 0141 27       		.uleb128 0x27
 1202 0142 19       		.uleb128 0x19
 1203 0143 11       		.uleb128 0x11
 1204 0144 01       		.uleb128 0x1
 1205 0145 12       		.uleb128 0x12
 1206 0146 06       		.uleb128 0x6
 1207 0147 40       		.uleb128 0x40
 1208 0148 18       		.uleb128 0x18
 1209 0149 9742     		.uleb128 0x2117
 1210 014b 19       		.uleb128 0x19
 1211 014c 00       		.byte	0
 1212 014d 00       		.byte	0
 1213 014e 18       		.uleb128 0x18
 1214 014f 2E       		.uleb128 0x2e
 1215 0150 01       		.byte	0x1
 1216 0151 3F       		.uleb128 0x3f
 1217 0152 19       		.uleb128 0x19
 1218 0153 03       		.uleb128 0x3
 1219 0154 0E       		.uleb128 0xe
 1220 0155 3A       		.uleb128 0x3a
 1221 0156 0B       		.uleb128 0xb
 1222 0157 3B       		.uleb128 0x3b
 1223 0158 05       		.uleb128 0x5
 1224 0159 27       		.uleb128 0x27
 1225 015a 19       		.uleb128 0x19
 1226 015b 11       		.uleb128 0x11
 1227 015c 01       		.uleb128 0x1
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 38


 1228 015d 12       		.uleb128 0x12
 1229 015e 06       		.uleb128 0x6
 1230 015f 40       		.uleb128 0x40
 1231 0160 18       		.uleb128 0x18
 1232 0161 9742     		.uleb128 0x2117
 1233 0163 19       		.uleb128 0x19
 1234 0164 01       		.uleb128 0x1
 1235 0165 13       		.uleb128 0x13
 1236 0166 00       		.byte	0
 1237 0167 00       		.byte	0
 1238 0168 19       		.uleb128 0x19
 1239 0169 1D       		.uleb128 0x1d
 1240 016a 01       		.byte	0x1
 1241 016b 31       		.uleb128 0x31
 1242 016c 13       		.uleb128 0x13
 1243 016d 11       		.uleb128 0x11
 1244 016e 01       		.uleb128 0x1
 1245 016f 12       		.uleb128 0x12
 1246 0170 06       		.uleb128 0x6
 1247 0171 58       		.uleb128 0x58
 1248 0172 0B       		.uleb128 0xb
 1249 0173 59       		.uleb128 0x59
 1250 0174 05       		.uleb128 0x5
 1251 0175 00       		.byte	0
 1252 0176 00       		.byte	0
 1253 0177 1A       		.uleb128 0x1a
 1254 0178 05       		.uleb128 0x5
 1255 0179 00       		.byte	0
 1256 017a 31       		.uleb128 0x31
 1257 017b 13       		.uleb128 0x13
 1258 017c 02       		.uleb128 0x2
 1259 017d 17       		.uleb128 0x17
 1260 017e 00       		.byte	0
 1261 017f 00       		.byte	0
 1262 0180 1B       		.uleb128 0x1b
 1263 0181 1D       		.uleb128 0x1d
 1264 0182 01       		.byte	0x1
 1265 0183 31       		.uleb128 0x31
 1266 0184 13       		.uleb128 0x13
 1267 0185 11       		.uleb128 0x11
 1268 0186 01       		.uleb128 0x1
 1269 0187 12       		.uleb128 0x12
 1270 0188 06       		.uleb128 0x6
 1271 0189 58       		.uleb128 0x58
 1272 018a 0B       		.uleb128 0xb
 1273 018b 59       		.uleb128 0x59
 1274 018c 05       		.uleb128 0x5
 1275 018d 01       		.uleb128 0x1
 1276 018e 13       		.uleb128 0x13
 1277 018f 00       		.byte	0
 1278 0190 00       		.byte	0
 1279 0191 1C       		.uleb128 0x1c
 1280 0192 898201   		.uleb128 0x4109
 1281 0195 00       		.byte	0
 1282 0196 11       		.uleb128 0x11
 1283 0197 01       		.uleb128 0x1
 1284 0198 31       		.uleb128 0x31
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 39


 1285 0199 13       		.uleb128 0x13
 1286 019a 00       		.byte	0
 1287 019b 00       		.byte	0
 1288 019c 1D       		.uleb128 0x1d
 1289 019d 2E       		.uleb128 0x2e
 1290 019e 01       		.byte	0x1
 1291 019f 3F       		.uleb128 0x3f
 1292 01a0 19       		.uleb128 0x19
 1293 01a1 03       		.uleb128 0x3
 1294 01a2 0E       		.uleb128 0xe
 1295 01a3 3A       		.uleb128 0x3a
 1296 01a4 0B       		.uleb128 0xb
 1297 01a5 3B       		.uleb128 0x3b
 1298 01a6 05       		.uleb128 0x5
 1299 01a7 27       		.uleb128 0x27
 1300 01a8 19       		.uleb128 0x19
 1301 01a9 49       		.uleb128 0x49
 1302 01aa 13       		.uleb128 0x13
 1303 01ab 11       		.uleb128 0x11
 1304 01ac 01       		.uleb128 0x1
 1305 01ad 12       		.uleb128 0x12
 1306 01ae 06       		.uleb128 0x6
 1307 01af 40       		.uleb128 0x40
 1308 01b0 18       		.uleb128 0x18
 1309 01b1 9742     		.uleb128 0x2117
 1310 01b3 19       		.uleb128 0x19
 1311 01b4 01       		.uleb128 0x1
 1312 01b5 13       		.uleb128 0x13
 1313 01b6 00       		.byte	0
 1314 01b7 00       		.byte	0
 1315 01b8 1E       		.uleb128 0x1e
 1316 01b9 34       		.uleb128 0x34
 1317 01ba 00       		.byte	0
 1318 01bb 03       		.uleb128 0x3
 1319 01bc 0E       		.uleb128 0xe
 1320 01bd 3A       		.uleb128 0x3a
 1321 01be 0B       		.uleb128 0xb
 1322 01bf 3B       		.uleb128 0x3b
 1323 01c0 05       		.uleb128 0x5
 1324 01c1 49       		.uleb128 0x49
 1325 01c2 13       		.uleb128 0x13
 1326 01c3 3F       		.uleb128 0x3f
 1327 01c4 19       		.uleb128 0x19
 1328 01c5 3C       		.uleb128 0x3c
 1329 01c6 19       		.uleb128 0x19
 1330 01c7 00       		.byte	0
 1331 01c8 00       		.byte	0
 1332 01c9 1F       		.uleb128 0x1f
 1333 01ca 2E       		.uleb128 0x2e
 1334 01cb 00       		.byte	0
 1335 01cc 3F       		.uleb128 0x3f
 1336 01cd 19       		.uleb128 0x19
 1337 01ce 3C       		.uleb128 0x3c
 1338 01cf 19       		.uleb128 0x19
 1339 01d0 6E       		.uleb128 0x6e
 1340 01d1 0E       		.uleb128 0xe
 1341 01d2 03       		.uleb128 0x3
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 40


 1342 01d3 0E       		.uleb128 0xe
 1343 01d4 3A       		.uleb128 0x3a
 1344 01d5 0B       		.uleb128 0xb
 1345 01d6 3B       		.uleb128 0x3b
 1346 01d7 05       		.uleb128 0x5
 1347 01d8 00       		.byte	0
 1348 01d9 00       		.byte	0
 1349 01da 00       		.byte	0
 1350              		.section	.debug_loc,"",%progbits
 1351              	.Ldebug_loc0:
 1352              	.LLST0:
 1353 0000 00000000 		.4byte	.LVL1
 1354 0004 00000000 		.4byte	.LVL1
 1355 0008 0100     		.2byte	0x1
 1356 000a 50       		.byte	0x50
 1357 000b 00000000 		.4byte	.LVL1
 1358 000f 08000000 		.4byte	.LVL2
 1359 0013 0300     		.2byte	0x3
 1360 0015 70       		.byte	0x70
 1361 0016 7C       		.sleb128 -4
 1362 0017 9F       		.byte	0x9f
 1363 0018 08000000 		.4byte	.LVL2
 1364 001c 10000000 		.4byte	.LVL4
 1365 0020 0300     		.2byte	0x3
 1366 0022 70       		.byte	0x70
 1367 0023 78       		.sleb128 -8
 1368 0024 9F       		.byte	0x9f
 1369 0025 10000000 		.4byte	.LVL4
 1370 0029 16000000 		.4byte	.LVL5
 1371 002d 0300     		.2byte	0x3
 1372 002f 70       		.byte	0x70
 1373 0030 74       		.sleb128 -12
 1374 0031 9F       		.byte	0x9f
 1375 0032 16000000 		.4byte	.LVL5
 1376 0036 1A000000 		.4byte	.LVL6
 1377 003a 0300     		.2byte	0x3
 1378 003c 70       		.byte	0x70
 1379 003d 60       		.sleb128 -32
 1380 003e 9F       		.byte	0x9f
 1381 003f 1A000000 		.4byte	.LVL6
 1382 0043 1C000000 		.4byte	.LVL7
 1383 0047 0300     		.2byte	0x3
 1384 0049 70       		.byte	0x70
 1385 004a 40       		.sleb128 -64
 1386 004b 9F       		.byte	0x9f
 1387 004c 1C000000 		.4byte	.LVL7
 1388 0050 24000000 		.4byte	.LFE68
 1389 0054 0100     		.2byte	0x1
 1390 0056 50       		.byte	0x50
 1391 0057 00000000 		.4byte	0
 1392 005b 00000000 		.4byte	0
 1393              	.LLST1:
 1394 005f 00000000 		.4byte	.LVL1
 1395 0063 0C000000 		.4byte	.LVL3
 1396 0067 0100     		.2byte	0x1
 1397 0069 51       		.byte	0x51
 1398 006a 0C000000 		.4byte	.LVL3
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 41


 1399 006e 24000000 		.4byte	.LFE68
 1400 0072 0400     		.2byte	0x4
 1401 0074 F3       		.byte	0xf3
 1402 0075 01       		.uleb128 0x1
 1403 0076 51       		.byte	0x51
 1404 0077 9F       		.byte	0x9f
 1405 0078 00000000 		.4byte	0
 1406 007c 00000000 		.4byte	0
 1407              	.LLST2:
 1408 0080 0A000000 		.4byte	.LVL8
 1409 0084 0E000000 		.4byte	.LVL9
 1410 0088 0200     		.2byte	0x2
 1411 008a 30       		.byte	0x30
 1412 008b 9F       		.byte	0x9f
 1413 008c 00000000 		.4byte	0
 1414 0090 00000000 		.4byte	0
 1415              	.LLST3:
 1416 0094 20000000 		.4byte	.LVL11
 1417 0098 26000000 		.4byte	.LVL12
 1418 009c 0200     		.2byte	0x2
 1419 009e 30       		.byte	0x30
 1420 009f 9F       		.byte	0x9f
 1421 00a0 00000000 		.4byte	0
 1422 00a4 00000000 		.4byte	0
 1423              		.section	.debug_aranges,"",%progbits
 1424 0000 6C000000 		.4byte	0x6c
 1425 0004 0200     		.2byte	0x2
 1426 0006 00000000 		.4byte	.Ldebug_info0
 1427 000a 04       		.byte	0x4
 1428 000b 00       		.byte	0
 1429 000c 0000     		.2byte	0
 1430 000e 0000     		.2byte	0
 1431 0010 00000000 		.4byte	.LFB69
 1432 0014 20000000 		.4byte	.LFE69-.LFB69
 1433 0018 00000000 		.4byte	.LFB71
 1434 001c 1A000000 		.4byte	.LFE71-.LFB71
 1435 0020 00000000 		.4byte	.LFB68
 1436 0024 24000000 		.4byte	.LFE68-.LFB68
 1437 0028 00000000 		.4byte	.LFB70
 1438 002c 24000000 		.4byte	.LFE70-.LFB70
 1439 0030 00000000 		.4byte	.LFB73
 1440 0034 02000000 		.4byte	.LFE73-.LFB73
 1441 0038 00000000 		.4byte	.LFB74
 1442 003c 20000000 		.4byte	.LFE74-.LFB74
 1443 0040 00000000 		.4byte	.LFB75
 1444 0044 14000000 		.4byte	.LFE75-.LFB75
 1445 0048 00000000 		.4byte	.LFB76
 1446 004c 44000000 		.4byte	.LFE76-.LFB76
 1447 0050 00000000 		.4byte	.LFB77
 1448 0054 2C000000 		.4byte	.LFE77-.LFB77
 1449 0058 00000000 		.4byte	.LFB78
 1450 005c 24000000 		.4byte	.LFE78-.LFB78
 1451 0060 00000000 		.4byte	.LFB72
 1452 0064 38000000 		.4byte	.LFE72-.LFB72
 1453 0068 00000000 		.4byte	0
 1454 006c 00000000 		.4byte	0
 1455              		.section	.debug_ranges,"",%progbits
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 42


 1456              	.Ldebug_ranges0:
 1457 0000 00000000 		.4byte	.LFB69
 1458 0004 20000000 		.4byte	.LFE69
 1459 0008 00000000 		.4byte	.LFB71
 1460 000c 1A000000 		.4byte	.LFE71
 1461 0010 00000000 		.4byte	.LFB68
 1462 0014 24000000 		.4byte	.LFE68
 1463 0018 00000000 		.4byte	.LFB70
 1464 001c 24000000 		.4byte	.LFE70
 1465 0020 00000000 		.4byte	.LFB73
 1466 0024 02000000 		.4byte	.LFE73
 1467 0028 00000000 		.4byte	.LFB74
 1468 002c 20000000 		.4byte	.LFE74
 1469 0030 00000000 		.4byte	.LFB75
 1470 0034 14000000 		.4byte	.LFE75
 1471 0038 00000000 		.4byte	.LFB76
 1472 003c 44000000 		.4byte	.LFE76
 1473 0040 00000000 		.4byte	.LFB77
 1474 0044 2C000000 		.4byte	.LFE77
 1475 0048 00000000 		.4byte	.LFB78
 1476 004c 24000000 		.4byte	.LFE78
 1477 0050 00000000 		.4byte	.LFB72
 1478 0054 38000000 		.4byte	.LFE72
 1479 0058 00000000 		.4byte	0
 1480 005c 00000000 		.4byte	0
 1481              		.section	.debug_line,"",%progbits
 1482              	.Ldebug_line0:
 1483 0000 B8020000 		.section	.debug_str,"MS",%progbits,1
 1483      0200A901 
 1483      00000201 
 1483      FB0E0D00 
 1483      01010101 
 1484              	.LASF38:
 1485 0000 75784372 		.ascii	"uxCriticalNesting\000"
 1485      69746963 
 1485      616C4E65 
 1485      7374696E 
 1485      6700
 1486              	.LASF30:
 1487 0012 76506F72 		.ascii	"vPortEnterCritical\000"
 1487      74456E74 
 1487      65724372 
 1487      69746963 
 1487      616C00
 1488              	.LASF26:
 1489 0025 7078436F 		.ascii	"pxCode\000"
 1489      646500
 1490              	.LASF29:
 1491 002c 76506F72 		.ascii	"vPortEndScheduler\000"
 1491      74456E64 
 1491      53636865 
 1491      64756C65 
 1491      7200
 1492              	.LASF22:
 1493 003e 5469636B 		.ascii	"TickType_t\000"
 1493      54797065 
 1493      5F7400
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 43


 1494              	.LASF8:
 1495 0049 5F5F696E 		.ascii	"__int32_t\000"
 1495      7433325F 
 1495      7400
 1496              	.LASF7:
 1497 0053 6C6F6E67 		.ascii	"long int\000"
 1497      20696E74 
 1497      00
 1498              	.LASF32:
 1499 005c 78506F72 		.ascii	"xPortPendSVHandler\000"
 1499      7450656E 
 1499      64535648 
 1499      616E646C 
 1499      657200
 1500              	.LASF18:
 1501 006f 5461736B 		.ascii	"TaskFunction_t\000"
 1501      46756E63 
 1501      74696F6E 
 1501      5F7400
 1502              	.LASF12:
 1503 007e 696E7433 		.ascii	"int32_t\000"
 1503      325F7400 
 1504              	.LASF14:
 1505 0086 666C6F61 		.ascii	"float\000"
 1505      7400
 1506              	.LASF40:
 1507 008c 76546173 		.ascii	"vTaskSwitchContext\000"
 1507      6B537769 
 1507      74636843 
 1507      6F6E7465 
 1507      787400
 1508              	.LASF37:
 1509 009f 756C4475 		.ascii	"ulDummy\000"
 1509      6D6D7900 
 1510              	.LASF42:
 1511 00a7 2E2E5C46 		.ascii	"..\\FreeRTOS\\Source\\portable\\GCC\\ARM_CM3\\port."
 1511      72656552 
 1511      544F535C 
 1511      536F7572 
 1511      63655C70 
 1512 00d4 6300     		.ascii	"c\000"
 1513              	.LASF4:
 1514 00d6 756E7369 		.ascii	"unsigned char\000"
 1514      676E6564 
 1514      20636861 
 1514      7200
 1515              	.LASF41:
 1516 00e4 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1516      43313120 
 1516      352E342E 
 1516      31203230 
 1516      31363036 
 1517 0117 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1517      20726576 
 1517      6973696F 
 1517      6E203233 
 1517      37373135 
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 44


 1518 014a 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1518      66756E63 
 1518      74696F6E 
 1518      2D736563 
 1518      74696F6E 
 1519              	.LASF9:
 1520 0172 5F5F7569 		.ascii	"__uint32_t\000"
 1520      6E743332 
 1520      5F7400
 1521              	.LASF10:
 1522 017d 6C6F6E67 		.ascii	"long unsigned int\000"
 1522      20756E73 
 1522      69676E65 
 1522      6420696E 
 1522      7400
 1523              	.LASF6:
 1524 018f 73686F72 		.ascii	"short unsigned int\000"
 1524      7420756E 
 1524      7369676E 
 1524      65642069 
 1524      6E7400
 1525              	.LASF48:
 1526 01a2 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1526      52784275 
 1526      66666572 
 1526      00
 1527              	.LASF15:
 1528 01af 646F7562 		.ascii	"double\000"
 1528      6C6500
 1529              	.LASF44:
 1530 01b6 756C4E65 		.ascii	"ulNewBASEPRI\000"
 1530      77424153 
 1530      45505249 
 1530      00
 1531              	.LASF27:
 1532 01c3 70765061 		.ascii	"pvParameters\000"
 1532      72616D65 
 1532      74657273 
 1532      00
 1533              	.LASF39:
 1534 01d0 78546173 		.ascii	"xTaskIncrementTick\000"
 1534      6B496E63 
 1534      72656D65 
 1534      6E745469 
 1534      636B00
 1535              	.LASF24:
 1536 01e3 76506F72 		.ascii	"vPortSetBASEPRI\000"
 1536      74536574 
 1536      42415345 
 1536      50524900 
 1537              	.LASF33:
 1538 01f3 78506F72 		.ascii	"xPortSysTickHandler\000"
 1538      74537973 
 1538      5469636B 
 1538      48616E64 
 1538      6C657200 
 1539              	.LASF0:
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 45


 1540 0207 756E7369 		.ascii	"unsigned int\000"
 1540      676E6564 
 1540      20696E74 
 1540      00
 1541              	.LASF25:
 1542 0214 7078546F 		.ascii	"pxTopOfStack\000"
 1542      704F6653 
 1542      7461636B 
 1542      00
 1543              	.LASF11:
 1544 0221 6C6F6E67 		.ascii	"long long unsigned int\000"
 1544      206C6F6E 
 1544      6720756E 
 1544      7369676E 
 1544      65642069 
 1545              	.LASF23:
 1546 0238 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 1546      74526169 
 1546      73654241 
 1546      53455052 
 1546      4900
 1547              	.LASF46:
 1548 024a 70727654 		.ascii	"prvTaskExitError\000"
 1548      61736B45 
 1548      78697445 
 1548      72726F72 
 1548      00
 1549              	.LASF34:
 1550 025b 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1550      74536574 
 1550      75705469 
 1550      6D657249 
 1550      6E746572 
 1551              	.LASF17:
 1552 0274 73697A65 		.ascii	"sizetype\000"
 1552      74797065 
 1552      00
 1553              	.LASF1:
 1554 027d 6C6F6E67 		.ascii	"long long int\000"
 1554      206C6F6E 
 1554      6720696E 
 1554      7400
 1555              	.LASF16:
 1556 028b 63686172 		.ascii	"char\000"
 1556      00
 1557              	.LASF19:
 1558 0290 53746163 		.ascii	"StackType_t\000"
 1558      6B547970 
 1558      655F7400 
 1559              	.LASF28:
 1560 029c 76506F72 		.ascii	"vPortSVCHandler\000"
 1560      74535643 
 1560      48616E64 
 1560      6C657200 
 1561              	.LASF5:
 1562 02ac 73686F72 		.ascii	"short int\000"
 1562      7420696E 
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 46


 1562      7400
 1563              	.LASF31:
 1564 02b6 76506F72 		.ascii	"vPortExitCritical\000"
 1564      74457869 
 1564      74437269 
 1564      74696361 
 1564      6C00
 1565              	.LASF13:
 1566 02c8 75696E74 		.ascii	"uint32_t\000"
 1566      33325F74 
 1566      00
 1567              	.LASF45:
 1568 02d1 756C4E65 		.ascii	"ulNewMaskValue\000"
 1568      774D6173 
 1568      6B56616C 
 1568      756500
 1569              	.LASF20:
 1570 02e0 42617365 		.ascii	"BaseType_t\000"
 1570      54797065 
 1570      5F7400
 1571              	.LASF47:
 1572 02eb 70727650 		.ascii	"prvPortStartFirstTask\000"
 1572      6F727453 
 1572      74617274 
 1572      46697273 
 1572      74546173 
 1573              	.LASF2:
 1574 0301 6C6F6E67 		.ascii	"long double\000"
 1574      20646F75 
 1574      626C6500 
 1575              	.LASF43:
 1576 030d 433A5C55 		.ascii	"C:\\Users\\samue\\Desktop\\RobotRage2\\Zumo\\ZumoBo"
 1576      73657273 
 1576      5C73616D 
 1576      75655C44 
 1576      65736B74 
 1577 033a 742E6379 		.ascii	"t.cydsn\000"
 1577      64736E00 
 1578              	.LASF3:
 1579 0342 7369676E 		.ascii	"signed char\000"
 1579      65642063 
 1579      68617200 
 1580              	.LASF36:
 1581 034e 78506F72 		.ascii	"xPortStartScheduler\000"
 1581      74537461 
 1581      72745363 
 1581      68656475 
 1581      6C657200 
 1582              	.LASF21:
 1583 0362 55426173 		.ascii	"UBaseType_t\000"
 1583      65547970 
 1583      655F7400 
 1584              	.LASF35:
 1585 036e 7078506F 		.ascii	"pxPortInitialiseStack\000"
 1585      7274496E 
 1585      69746961 
 1585      6C697365 
ARM GAS  C:\Users\samue\AppData\Local\Temp\ccA3qj9L.s 			page 47


 1585      53746163 
 1586              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
